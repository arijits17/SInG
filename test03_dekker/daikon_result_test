Daikon version 5.6.4, released April 3, 2018; http://plse.cs.washington.edu/daikon.
Reading declaration files Processing trace data; reading 3 dtrace files:

No return from procedure observed 1 time.  Unmatched entries are ignored!
Unterminated calls:
  ..thr2() : 1 invocation
End of report for procedures not returned from.  Unmatched entries are ignored!

===========================================================================
..main():::ENTER
::flag1 == ::flag2
::flag1 == ::turn
::flag1 == ::x
::flag1 == 0
::cond == 1
===========================================================================
..main():::EXIT
::flag1 == return
::flag1 == orig(::flag1)
::flag1 == orig(::flag2)
::flag1 == orig(::turn)
::flag1 == orig(::x)
::turn == orig(::cond)
::flag1 == 0
::flag2 one of { 0, 1 }
::cond one of { 0, 1 }
::turn == 1
::x one of { 0, 1 }
::flag1 <= ::flag2
::flag1 <= ::cond
::flag1 <= ::x
::flag2 <= ::turn
::cond <= ::turn
::turn >= ::x
===========================================================================
..okay_dummy_f1():::ENTER
::flag1 == ::cond
::turn == ::x
::turn == count1
::turn == count2
::flag1 == 1
::flag2 one of { 0, 1 }
::turn == 0
::flag1 >= ::flag2
::flag2 >= ::turn
===========================================================================
..okay_dummy_f1():::EXIT
::flag1 == orig(::flag1)
::flag1 == orig(::cond)
::turn == ::x
::turn == orig(::turn)
::turn == orig(::x)
::turn == orig(count1)
::turn == orig(count2)
::flag1 == 1
::flag2 one of { 0, 1 }
::cond one of { 0, 1 }
::turn == 0
::flag1 >= ::flag2
::flag1 >= ::cond
::flag1 >= orig(::flag2)
::flag2 >= ::cond
::flag2 >= ::turn
::flag2 >= orig(::flag2)
::cond >= ::turn
::cond >= orig(::flag2)
::turn <= orig(::flag2)
===========================================================================
..okay_dummy_f2():::ENTER
::flag1 == ::cond
::turn == ::x
::turn == count1
::turn == count2
::flag1 == 1
::flag2 one of { 0, 1 }
::turn == 0
::flag1 >= ::flag2
::flag2 >= ::turn
===========================================================================
..okay_dummy_f2():::EXIT
::flag1 == orig(::flag1)
::flag1 == orig(::cond)
::turn == ::x
::turn == orig(::turn)
::turn == orig(::x)
::turn == orig(count1)
::turn == orig(count2)
::flag1 == 1
::flag2 one of { 0, 1 }
::cond one of { 0, 1 }
::turn == 0
::flag1 >= ::flag2
::flag1 >= ::cond
::flag1 >= orig(::flag2)
::flag2 >= ::turn
::flag2 >= orig(::flag2)
::cond >= ::turn
::cond >= orig(::flag2)
::turn <= orig(::flag2)
===========================================================================
..okay_dummy_f3():::ENTER
::flag1 == ::cond
::turn == ::x
::turn == count1
::turn == count2
::flag1 == 1
::flag2 one of { 0, 1 }
::turn == 0
::flag1 >= ::flag2
::flag2 >= ::turn
===========================================================================
..okay_dummy_f3():::EXIT
::flag1 == orig(::flag1)
::flag1 == orig(::cond)
::flag2 == ::cond
::turn == ::x
::turn == orig(::turn)
::turn == orig(::x)
::turn == orig(count1)
::turn == orig(count2)
::flag1 == 1
::flag2 one of { 0, 1 }
::turn == 0
::flag1 >= ::flag2
::flag1 >= orig(::flag2)
::flag2 >= ::turn
::flag2 >= orig(::flag2)
::turn <= orig(::flag2)
===========================================================================
..thr1():::ENTER
::flag1 == ::flag2
::flag1 == ::turn
::flag1 == ::x
::flag1 == 0
::cond == 1
===========================================================================
..thr1():::EXIT
::flag1 == orig(::flag1)
::flag1 == orig(::flag2)
::flag1 == orig(::turn)
::flag1 == orig(::x)
::turn == orig(::cond)
::flag1 == 0
::flag2 one of { 0, 1 }
::cond one of { 0, 1 }
::turn == 1
::x one of { 0, 1 }
return == null
::flag1 <= ::flag2
::flag1 <= ::cond
::flag1 <= ::x
::flag2 <= ::turn
::flag2 >= ::x
::cond <= ::turn
::cond >= ::x
::turn >= ::x
===========================================================================
..thr2():::ENTER
::flag2 == ::x
::flag1 one of { 0, 1 }
::flag2 == 0
::cond one of { 0, 1 }
::turn one of { 0, 1 }
::flag1 >= ::flag2
::flag2 <= ::cond
::flag2 <= ::turn
===========================================================================
..thr2():::EXIT
::flag1 one of { 0, 1 }
::flag2 one of { 0, 1 }
::cond one of { 0, 1 }
::turn one of { 0, 1 }
::x one of { 0, 1 }
return == null
::flag1 >= ::flag2
::flag1 != ::x
::flag1 <= orig(::flag1)
::flag1 >= orig(::flag2)
::flag2 <= ::turn
::flag2 <= orig(::flag1)
::flag2 >= orig(::flag2)
::cond >= orig(::flag2)
::cond <= orig(::cond)
::turn >= ::x
::turn >= orig(::flag2)
::turn >= orig(::turn)
::x >= orig(::flag2)
Exiting Daikon.
